/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState, useEffect, useCallback } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    ArrowDown: THREE.Mesh
  }
  materials: {
    Black: THREE.MeshStandardMaterial
  }
}

interface ArrowDownProps {
  position: THREE.Vector3
  rotation: THREE.Euler
  scale: THREE.Vector3
  contact: boolean
  setContact: (contact: boolean) => void
}

const ArrowDown: React.FC<ArrowDownProps> = ({ contact, setContact, ...props }) => {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/models/arrowDown.glb') as GLTFResult
  const [hovered, setHover] = useState(false)
  useEffect(() => void (document.body.style.cursor = hovered ? "pointer" : "auto"), [hovered])
  const onPointerOver = useCallback(() => setHover(true), [])
  const onPointerOut = useCallback(() => setHover(false), [])
  
  return (
    <group 
      ref={group}
      dispose={null} 
      {...props}>
      <mesh
        geometry={nodes.ArrowDown.geometry}
        material={materials.Black}
        rotation={[-Math.PI / 4, 0, -0.01]}
        scale={[0.66, 2, 2]}
        onPointerOver={onPointerOver} 
        onPointerOut={onPointerOut}
        onClick={() => setContact(!contact)}
      />
    </group>
  )
}

useGLTF.preload('/models/arrowDown.glb')

export default ArrowDown